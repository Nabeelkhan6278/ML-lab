# -*- coding: utf-8 -*-
"""Nabeel khan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qR_FNYEutByxK7C6pfdT3wI-I2JaQ0IU
"""

pip install streamlit

pip install scikit-learn

pip install numpy

pip install pandas

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv("Train.csv")



st.title("ML Predictor App with History")

# Show raw data
if st.checkbox("Show Raw Data"):
    st.dataframe(df)

# Show summary
st.subheader("Dataset Summary")
st.write(df.describe(include='all'))

# Target column selection
st.subheader("Model Training")
target_column = st.selectbox("Select the target column (what you want to predict)", df.columns)

# Encode categorical variables
X = df.drop(columns=[target_column])
y = df[target_column]

# Encode strings if necessary
label_encoders = {}
for col in X.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col].astype(str))
    label_encoders[col] = le

# Encode target if needed
if y.dtype == 'object':
    target_encoder = LabelEncoder()
    y = target_encoder.fit_transform(y)
else:
    target_encoder = None

# Train model
model = RandomForestClassifier()
model.fit(X, y)

# User input
st.subheader("Make a Prediction")
user_input = {}
for col in X.columns:
    val = st.number_input(f"Enter value for {col}", value=float(X[col].mean()))
    user_input[col] = val

if st.button("Predict"):
    input_df = pd.DataFrame([user_input])
    prediction = model.predict(input_df)[0]
    if target_encoder:
        prediction_label = target_encoder.inverse_transform([prediction])[0]
    else:
        prediction_label = prediction
    st.success(f"Predicted: {prediction_label}")

    # Save prediction history
    if "history" not in st.session_state:
        st.session_state.history = []
    st.session_state.history.append({
        **user_input,
        "Prediction": prediction_label
    })

# Show history
if "history" in st.session_state and st.session_state.history:
    st.subheader("Prediction History")
    history_df = pd.DataFrame(st.session_state.history)
    st.dataframe(history_df)